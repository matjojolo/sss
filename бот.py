import os
import re
import asyncio
import logging
import aiosqlite
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup,
    InlineKeyboardButton, LabeledPrice, PreCheckoutQuery, ContentType
)
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# Telegram bot token
API_TOKEN = '7514289103:AAEPjVet23FqF7VGsqKEE6rVw-H348w-_XQ'
# –î–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤—ë–∑–¥–∞–º–∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ç–æ–∫–µ–Ω
API_STARS_PROVIDER_TOKEN = '7514289103:AAEPjVet23FqF7VGsqKEE6rVw-H348w-_XQ'

# ID –≥—Ä—É–ø–ø—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
GROUP_ID = -1002579257687

# –ü—É—Ç—å –∫ –±–∞–∑–µ –∏ —Ü–µ–Ω—ã
DB_PATH = 'userdata.db'
PRICE_RUB = 399
PRICE_STARS = 200

# –§–ª–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ DeepSik
USE_DEEPSEEK = True
if USE_DEEPSEEK:
    import deepsik
    deepsik_client = deepsik.Client(api_key='YOUR_DEEPSEEK_API_KEY')
else:
    deepsik_client = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    fio = State()
    source = State()
    bank = State()
    card = State()
    email = State()
    phone = State()

# –ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
FIO_PATTERN = re.compile(r'^[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+$')
CARD_PATTERN = re.compile(r'^\d{6}\*\d{4}$')
EMAIL_PATTERN = re.compile(r'^[^@\s]+@[^@\s]+\.[^@\s]+$')
PHONE_PATTERN = re.compile(r'^\+?\d{10,15}$')

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER,
                fio TEXT, source TEXT, bank TEXT, card TEXT, email TEXT, phone TEXT
            )''')
        await db.commit()

async def save_data(user_id, data):
    await init_db()
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            'INSERT INTO users (telegram_id, fio, source, bank, card, email, phone) VALUES (?, ?, ?, ?, ?, ?, ?)',
            (user_id, data['fio'], data['source'], data['bank'], data['card'], data['email'], data['phone'])
        )
        await db.commit()

# –ö–æ–º–∞–Ω–¥–∞ /start —Å –∫–Ω–æ–ø–∫–∞–º–∏
@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton('‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='start_form')],
        [InlineKeyboardButton('üì® –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º', callback_data='contact_admin')]
    ])
    await message.answer(
        'üëã <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</b>\n'
        '–í—ã –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –≤ <i>–û—Ç–ø–∏—Å–∫–∞ –ë–æ—Ç</i>.',
        reply_markup=kb
    )

@dp.callback_query(F.data=='start_form')
async def start_form(cb: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(Form.fio)
    await cb.message.edit_text('üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û (–¢—Ä–∏ —Å–ª–æ–≤–∞, –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è):')
    await cb.answer()

@dp.callback_query(F.data=='contact_admin')
async def contact_admin(cb: CallbackQuery):
    await cb.message.edit_text('üì® –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞:')
    await cb.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
@dp.message(Form.fio)
async def process_fio(msg: Message, state: FSMContext):
    if not FIO_PATTERN.match(msg.text):
        return await msg.answer('‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á')
    await state.update_data(fio=msg.text)
    await state.set_state(Form.source)
    await msg.answer('üìÉ –£–∫–∞–∂–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–ø–∏—Å–∞–Ω–∏—è (—Å–∞–π—Ç –∏–ª–∏ —Å–µ—Ä–≤–∏—Å):')

@dp.message(Form.source)
async def process_source(msg: Message, state: FSMContext):
    if len(msg.text) < 3:
        return await msg.answer('‚ùó –û–ø–∏—à–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞–º–∏')
    await state.update_data(source=msg.text)
    await state.set_state(Form.bank)
    await msg.answer('üè¶ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:')

@dp.message(Form.bank)
async def process_bank(msg: Message, state: FSMContext):
    if not re.match(r'^[\w\s]{3,}$', msg.text):
        return await msg.answer('‚ùó –ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞')
    await state.update_data(bank=msg.text)
    await state.set_state(Form.card)
    await msg.answer('üí≥ –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ä—Ç—É (123456*7890):')

@dp.message(Form.card)
async def process_card(msg: Message, state: FSMContext):
    if not CARD_PATTERN.match(msg.text):
        return await msg.answer('‚ùó –§–æ—Ä–º–∞—Ç –∫–∞—Ä—Ç—ã: 6 —Ü–∏—Ñ—Ä, –∑–≤—ë–∑–¥–æ—á–∫–∞, 4 —Ü–∏—Ñ—Ä—ã')
    await state.update_data(card=msg.text)
    await state.set_state(Form.email)
    await msg.answer('üìß –í–≤–µ–¥–∏—Ç–µ email:')

@dp.message(Form.email)
async def process_email(msg: Message, state: FSMContext):
    if not EMAIL_PATTERN.match(msg.text):
        return await msg.answer('‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü—Ä–∏–º–µ—Ä: user@example.com')
    await state.update_data(email=msg.text)
    await state.set_state(Form.phone)
    await msg.answer('üì± –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω (10‚Äì15 —Ü–∏—Ñ—Ä, –º–æ–∂–Ω–æ —Å +):')

@dp.message(Form.phone)
async def process_phone(msg: Message, state: FSMContext):
    if not PHONE_PATTERN.match(msg.text):
        return await msg.answer('‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω. –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, 10‚Äì15 —Å–∏–º–≤–æ–ª–æ–≤')
    data = await state.get_data()
    await state.clear()
    await save_data(msg.from_user.id, data)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º
    text = (
        f"<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:</b>\n"
        f"üë§ –§–ò–û: {data['fio']}\n"
        f"üìÑ –ò—Å—Ç–æ—á–Ω–∏–∫: {data['source']}\n"
        f"üè¶ –ë–∞–Ω–∫: {data['bank']}\n"
        f"üí≥ –ö–∞—Ä—Ç–∞: {data['card']}\n"
        f"üìß Email: {data['email']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}"
    )
    await bot.send_message(GROUP_ID, text)
    # –û–ø—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {PRICE_RUB}‚ÇΩ", url="https://www.tinkoff.ru")],
        [InlineKeyboardButton(f"‚≠ê –û–ø–ª–∞—Ç–∏—Ç—å {PRICE_STARS}‚≠ê", callback_data=f"pay_stars:{PRICE_STARS}")]
    ])
    await msg.answer('üí∞ –û–ø–ª–∞—Ç–∏—Ç–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–ø–ª–∞—Ç—ã
@dp.callback_query(F.data.startswith('pay_stars:'))
async def pay_stars_cb(cb: CallbackQuery):
    _, amt = cb.data.split(':')
    prices = [LabeledPrice(label="–û—Ç–ø–∏—Å–∫–∞ –ë–æ—Ç", amount=int(amt))]
    await bot.send_invoice(
        chat_id=cb.from_user.id,
        title="–û–ø–ª–∞—Ç–∞ –∑–≤—ë–∑–¥–∞–º–∏",
        description="–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥ –ø–æ –æ—Ç–º–µ–Ω–µ —Å–ø–∏—Å–∞–Ω–∏–π",
        payload="stars",
        provider_token=API_STARS_PROVIDER_TOKEN,
        currency="STAR",
        prices=prices
    )
    await cb.answer()

@dp.pre_checkout_query(lambda q: True)
async def pre_checkout(q: PreCheckoutQuery):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ DeepSik (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    if USE_DEEPSEEK and deepsik_client:
        user_id = q.from_user.id
        amount = q.total_amount
        payload = getattr(q, 'invoice_payload', None)
        try:
            result = deepsik_client.verify_payment(user_id=user_id, amount=amount, payload=payload)
        except Exception:
            await bot.answer_pre_checkout_query(q.id, ok=False, error_message="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞.")
            return
        if not getattr(result, 'valid', False):
            await bot.answer_pre_checkout_query(q.id, ok=False, error_message="–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É.")
            await bot.send_message(GROUP_ID, f"‚ö†Ô∏è –ü–ª–∞—Ç—ë–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É DeepSik.")
            return
    await bot.answer_pre_checkout_query(q.id, ok=True)

@dp.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def successful_pay(msg: Message):
    await bot.send_message(GROUP_ID, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞: {msg.from_user.full_name} (ID {msg.from_user.id})")
    await msg.answer("‚úÖ –í–∞—à –ø–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂—ë–Ω.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
