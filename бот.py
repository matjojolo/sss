import os
if os.path.exists("userdata.db"):
    os.remove("userdata.db")

import asyncio
import logging
import aiosqlite
import re
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup,
    InlineKeyboardButton, LabeledPrice, PreCheckoutQuery
)
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

API_TOKEN = '7514289103:AAEPjVet23FqF7VGsqKEE6rVw-H348w-_XQ'
API_STARS_PROVIDER_TOKEN = 'YOUR_STARS_PROVIDER_TOKEN_HERE'
GROUP_ID = -1002579257687

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ –≤ —Ä—É–±–ª—è—Ö –∏ –∑–≤—ë–∑–¥–∞—Ö
PRICE_RUB = 399
PRICE_STARS = 200

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

class Form(StatesGroup):
    fio = State()
    source = State()
    bank = State()
    card = State()
    email = State()
    phone = State()


def is_valid_fio(text: str) -> bool:
    parts = text.strip().split()
    if len(parts) != 3:
        return False
    pattern = r'^[–ê-–Ø–Å][–∞-—è—ë]+'
    return all(re.match(pattern, part) for part in parts)

@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    text = (
        "üëã <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</b>\n"
        "–í—ã –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –≤ <i>¬´–û—Ç–ø–∏—Å–∫–∞ –ë–æ—Ç¬ª</i> ‚Äî –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö —Å–ø–∏—Å–∞–Ω–∏–π.\n\n"
        "üîç –ú—ã –ø–æ–º–æ–≥–∞–µ–º:\n"
        "‚Äî –≤—ã—è—Å–Ω–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–ø–∏—Å–∞–Ω–∏–π\n"
        "‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–∞ –æ—Ç–º–µ–Ω—É —É—Å–ª—É–≥\n\n"
        "üìã –ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="agree")],
        [InlineKeyboardButton(text="üì® –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", callback_data="contact_admin")]
    ])
    await message.answer(text, reply_markup=kb)

@dp.callback_query(F.data == "agree")
async def agree_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Form.fio)
    await callback.message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë <b>–§–ò–û</b>:")
    await callback.answer()

@dp.callback_query(F.data == "contact_admin")
async def contact_admin(callback: CallbackQuery):
    await callback.message.answer("üì® –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º.")
    await callback.answer()

@dp.message(Form.fio)
async def process_fio(message: Message, state: FSMContext):
    if not is_valid_fio(message.text):
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á</b>")
        return
    await state.update_data(fio=message.text)
    await state.set_state(Form.source)
    await message.answer("üìÉ –£–∫–∞–∂–∏—Ç–µ, –æ—Ç–∫—É–¥–∞ –∏–¥—ë—Ç —Å–ø–∏—Å–∞–Ω–∏–µ (—Å–∞–π—Ç/—Å–µ—Ä–≤–∏—Å):")

@dp.message(Form.source)
async def process_source(message: Message, state: FSMContext):
    await state.update_data(source=message.text)
    await state.set_state(Form.bank)
    await message.answer("üè¶ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —Å–ø–∏—Å–∞–Ω–∏—è:")

@dp.message(Form.bank)
async def process_bank(message: Message, state: FSMContext):
    await state.update_data(bank=message.text)
    await state.set_state(Form.card)
    await message.answer("üí≥ –í–≤–µ–¥–∏—Ç–µ 6 –ø–µ—Ä–≤—ã—Ö –∏ 4 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã (123456*7890):")

@dp.message(Form.card)
async def process_card(message: Message, state: FSMContext):
    await state.update_data(card=message.text)
    await state.set_state(Form.email)
    await message.answer("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")

@dp.message(Form.email)
async def process_email(message: Message, state: FSMContext):
    await state.update_data(email=message.text)
    await state.set_state(Form.phone)
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@dp.message(Form.phone)
async def process_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    data = await state.get_data()

    await recreate_db_if_needed()
    await save_to_db(message.from_user.id, data)

    text = (
        f"<b>–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞:</b>\n"
        f"üë§ –§–ò–û: {data['fio']}\n"
        f"üìÑ –ò—Å—Ç–æ—á–Ω–∏–∫ —Å–ø–∏—Å–∞–Ω–∏—è: {data['source']}\n"
        f"üè¶ –ë–∞–Ω–∫: {data['bank']}\n"
        f"üí≥ –ö–∞—Ä—Ç–∞: {data['card']}\n"
        f"üìß Email: {data['email']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}"
    )
    await bot.send_message(GROUP_ID, text)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {PRICE_RUB}‚ÇΩ", url="https://www.tinkoff.ru")],
        [InlineKeyboardButton(text=f"‚≠ê –û–ø–ª–∞—Ç–∏—Ç—å {PRICE_STARS} –∑–≤—ë–∑–¥", callback_data=f"pay_stars:{PRICE_STARS}")]
    ])
    await message.answer(
        f"üí∞ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –æ–ø–ª–∞—Ç–∏—Ç–µ {PRICE_RUB}‚ÇΩ –∏–ª–∏ {PRICE_STARS} –∑–≤—ë–∑–¥:",
        reply_markup=kb
    )
    await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 48 —á–∞—Å–æ–≤.")
    await state.clear()

@dp.callback_query(F.data.startswith("pay_stars:"))
async def pay_stars_callback(callback: CallbackQuery):
    _, amount = callback.data.split(":")
    stars = int(amount)
    prices = [LabeledPrice(label="–û—Ç–ø–∏—Å–∫–∞ –ë–æ—Ç", amount=stars)]
    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title="–û–ø–ª–∞—Ç–∞ –∑–≤—ë–∑–¥–∞–º–∏",
        description="–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥ –ø–æ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–æ–∫",
        payload="payment_stars",
        provider_token=API_STARS_PROVIDER_TOKEN,
        currency="STAR",
        prices=prices
    )
    await callback.answer()

@dp.pre_checkout_query(lambda query: True)
async def process_pre_checkout(query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query_id=query.id, ok=True)

@dp.message(F.content_type == types.ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: Message):
    await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

async def recreate_db_if_needed():
    async with aiosqlite.connect("userdata.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER,
                fio TEXT,
                source TEXT,
                bank TEXT,
                card TEXT,
                email TEXT,
                phone TEXT
            )
        """
        )
        await db.commit()

async def save_to_db(user_id, data):
    async with aiosqlite.connect("userdata.db") as db:
        await db.execute("""
            INSERT INTO users (telegram_id, fio, source, bank, card, email, phone)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (
            user_id,
            data['fio'],
            data['source'],
            data['bank'],
            data['card'],
            data['email'],
            data['phone']
        ))
        await db.commit()

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
    