import os
import re
import logging
import aiosqlite
import asyncio
import requests
from logging.handlers import RotatingFileHandler
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    CallbackContext, CallbackQueryHandler,
    ConversationHandler, PreCheckoutQueryHandler
)
from telegram.error import BadRequest
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_TOKEN")  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
if not TOKEN or not PAYMENT_PROVIDER_TOKEN or not DEEPSEEK_API_KEY:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")

file_handler = RotatingFileHandler('unsub_bot.log', maxBytes=5*1024*1024, backupCount=3)
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)

console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

logging.getLogger("httpx").setLevel(logging.WARNING)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DB_PATH = 'unsub_data.db'
GROUP_ID = -1002579257687
PRICE_RUB = 399
PRICE_STARS = 200

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
FIO, SOURCE, BANK, CARD, EMAIL, PHONE = range(6)

# –ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
FIO_PATTERN = re.compile(r'^[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+$')
CARD_PATTERN = re.compile(r'^\d{6}\*\d{4}$')
EMAIL_PATTERN = re.compile(r'^[^@\s]+@[^@\s]+\.[^@\s]+$')
PHONE_PATTERN = re.compile(r'^\+?\d{10,15}$')

async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER UNIQUE,
                fio TEXT, source TEXT, bank TEXT, card TEXT, email TEXT, phone TEXT,
                payment_status TEXT DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''')
        await db.commit()

async def save_data(user_id, data):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            '''INSERT OR REPLACE INTO users 
            (telegram_id, fio, source, bank, card, email, phone) 
            VALUES (?, ?, ?, ?, ?, ?, ?)''',
            (user_id, data['fio'], data['source'], data['bank'], 
             data['card'], data['email'], data['phone'])
        )
        await db.commit()

async def update_payment_status(user_id, status):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "UPDATE users SET payment_status = ? WHERE telegram_id = ?",
            (status, user_id)
        )
        await db.commit()

async def ask_deepseek(prompt):
    url = "https://api.deepseek.com/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Content-Type": "application/json",
    }
    
    data = {
        "model": "deepseek-chat",
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.7,
        "max_tokens": 500,
    }
    
    try:
        response = requests.post(url, headers=headers, json=data, timeout=20)
        response.raise_for_status()
        return response.json()["choices"][0]["message"]["content"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ DeepSeek API: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."

async def start(update: Update, context: CallbackContext):
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton('‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='start_form')],
        [InlineKeyboardButton('üì® –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º', callback_data='contact_admin')],
        [InlineKeyboardButton('‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ', callback_data='about_service')]
    ])
    await update.message.reply_text(
        'üëã <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</b>\n–í—ã –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –≤ <i>–û—Ç–ø–∏—Å–∫–∞ –ë–æ—Ç</i> –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ø–∏—Å–∞–Ω–∏–π.',
        reply_markup=kb,
        parse_mode='HTML'
    )

async def handle_buttons(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'start_form':
        await query.message.edit_text('üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û (–¢—Ä–∏ —Å–ª–æ–≤–∞, –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è):')
        return FIO
    elif query.data == 'contact_admin':
        await query.message.edit_text('üì® –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞:')
        context.user_data['contact_admin'] = True
        return ConversationHandler.END
    elif query.data == 'about_service':
        await query.message.edit_text(
            '‚ÑπÔ∏è <b>–û —Å–µ—Ä–≤–∏—Å–µ:</b>\n\n–ú—ã –ø–æ–º–æ–≥–∞–µ–º –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏.\n–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è.',
            parse_mode='HTML'
        )
        return ConversationHandler.END
    
    return ConversationHandler.END

async def process_fio(update: Update, context: CallbackContext):
    user_input = update.message.text
    
    if not FIO_PATTERN.match(user_input):
        correction = await ask_deepseek(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –§–ò–û: '{user_input}'. –ü–æ–ø—Ä–æ—Å–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Ñ–æ—Ä–º–∞—Ç '–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ'.")
        await update.message.reply_text(correction)
        return FIO
    
    context.user_data['fio'] = user_input
    await update.message.reply_text('üìÉ –£–∫–∞–∂–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–ø–∏—Å–∞–Ω–∏—è (—Å–∞–π—Ç –∏–ª–∏ —Å–µ—Ä–≤–∏—Å):')
    return SOURCE

async def process_source(update: Update, context: CallbackContext):
    user_input = update.message.text
    context.user_data['source'] = user_input
    await update.message.reply_text('üè¶ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:')
    return BANK

async def process_bank(update: Update, context: CallbackContext):
    user_input = update.message.text
    context.user_data['bank'] = user_input
    await update.message.reply_text('üí≥ –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ä—Ç—É (—Ñ–æ—Ä–º–∞—Ç: 123456*7890):')
    return CARD

async def process_card(update: Update, context: CallbackContext):
    user_input = update.message.text
    
    if not CARD_PATTERN.match(user_input):
        correction = await ask_deepseek(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: '{user_input}'. –ü–æ–ø—Ä–æ—Å–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Ñ–æ—Ä–º–∞—Ç '123456*7890'.")
        await update.message.reply_text(correction)
        return CARD
    
    context.user_data['card'] = user_input
    await update.message.reply_text('üìß –í–≤–µ–¥–∏—Ç–µ email:')
    return EMAIL

async def process_email(update: Update, context: CallbackContext):
    user_input = update.message.text
    
    if not EMAIL_PATTERN.match(user_input):
        correction = await ask_deepseek(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª email: '{user_input}'. –ü–æ–ø—Ä–æ—Å–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–π email.")
        await update.message.reply_text(correction)
        return EMAIL
    
    context.user_data['email'] = user_input
    await update.message.reply_text('üì± –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω (10-15 —Ü–∏—Ñ—Ä, –º–æ–∂–Ω–æ —Å +):')
    return PHONE

async def process_phone(update: Update, context: CallbackContext):
    user_input = update.message.text
    
    if not PHONE_PATTERN.match(user_input):
        correction = await ask_deepseek(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–ª–µ—Ñ–æ–Ω: '{user_input}'. –ü–æ–ø—Ä–æ—Å–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ 10-15 —Ü–∏—Ñ—Ä.")
        await update.message.reply_text(correction)
        return PHONE
    
    context.user_data['phone'] = user_input
    user_id = update.message.from_user.id
    
    await save_data(user_id, context.user_data)
    
    text = (
        f"<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–ø–∏—Å–∫—É:</b>\n"
        f"üë§ –§–ò–û: {context.user_data['fio']}\n"
        f"üìÑ –ò—Å—Ç–æ—á–Ω–∏–∫: {context.user_data['source']}\n"
        f"üè¶ –ë–∞–Ω–∫: {context.user_data['bank']}\n"
        f"üí≥ –ö–∞—Ä—Ç–∞: {context.user_data['card']}\n"
        f"üìß Email: {context.user_data['email']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}"
    )
    await context.bot.send_message(GROUP_ID, text, parse_mode='HTML')
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {PRICE_RUB}‚ÇΩ", callback_data=f"pay_rub:{PRICE_RUB}")],
        [InlineKeyboardButton(f"‚≠ê –û–ø–ª–∞—Ç–∏—Ç—å {PRICE_STARS}‚≠ê", callback_data=f"pay_stars:{PRICE_STARS}")]
    ])
    await update.message.reply_text('üí∞ –û–ø–ª–∞—Ç–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', reply_markup=kb)
    
    context.user_data.clear()
    return ConversationHandler.END

async def handle_free_text(update: Update, context: CallbackContext):
    user_message = update.message.text
    user_id = update.message.from_user.id
    
    if context.user_data.get('contact_admin'):
        await context.bot.send_message(GROUP_ID, f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n{user_message}")
        await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        context.user_data['contact_admin'] = False
        return
    
    try:
        response = await ask_deepseek(user_message)
        await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_payment_button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    try:
        if query.data.startswith('pay_rub:'):
            _, amount = query.data.split(':')
            await send_invoice(context.bot, query.from_user.id, int(amount), "RUB", "–û—Ç–ø–∏—Å–∫–∞ –ë–æ—Ç (—Ä—É–±–ª–∏)")
        elif query.data.startswith('pay_stars:'):
            _, amount = query.data.split(':')
            await send_invoice(context.bot, query.from_user.id, int(amount), "STAR", "–û—Ç–ø–∏—Å–∫–∞ –ë–æ—Ç (–∑–≤—ë–∑–¥—ã)")
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await query.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await query.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await query.message.edit_reply_markup(reply_markup=None)

async def send_invoice(bot, chat_id, amount, currency, title):
    prices = [LabeledPrice(label="–£—Å–ª—É–≥–∞ –æ—Ç–ø–∏—Å–∫–∏", amount=amount * 100)]
    await bot.send_invoice(
        chat_id=chat_id,
        title=title,
        description="–£—Å–ª—É–≥–∞ –æ—Ç–º–µ–Ω—ã –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∏ —Å–ø–∏—Å–∞–Ω–∏–π",
        payload="unsubscription_service",
        provider_token=PAYMENT_PROVIDER_TOKEN,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        currency=currency,
        prices=prices
    )

async def pre_checkout(update: Update, context: CallbackContext):
    query = update.pre_checkout_query
    await query.answer(ok=True)

async def successful_payment(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    payment = update.message.successful_payment
    
    await update_payment_status(user_id, "completed")
    
    await context.bot.send_message(
        GROUP_ID,
        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞: {update.message.from_user.full_name} (ID {user_id})\n–°—É–º–º–∞: {payment.total_amount / 100} {payment.currency}"
    )
    
    await update.message.reply_text(
        "‚úÖ –í–∞—à –ø–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –ú—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –≤–∞—à–µ–π –æ—Ç–ø–∏—Å–∫–æ–π.\n–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è."
    )

async def cancel(update: Update, context: CallbackContext):
    await update.message.reply_text('‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω.')
    context.user_data.clear()
    return ConversationHandler.END

async def error_handler(update: Update, context: CallbackContext):
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
    if update.callback_query:
        await update.callback_query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    elif update.message:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def main():
    await init_db()
    
    application = Application.builder().token(TOKEN).build()
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    await application.bot.delete_webhook(drop_pending_updates=True)
    
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_buttons, pattern='^start_form$')],
        states={
            FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_fio)],
            SOURCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_source)],
            BANK: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_bank)],
            CARD: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_card)],
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_email)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_phone)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_user=True,
        per_chat=True
    )
    
    application.add_handler(CommandHandler('start', start))
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(handle_payment_button, pattern='^pay_(rub|stars):'))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    application.add_handler(PreCheckoutQueryHandler(pre_checkout))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_free_text))
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    logger.info("–ë–æ—Ç –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏ –∑–∞–ø—É—â–µ–Ω")
    await application.run_polling()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
