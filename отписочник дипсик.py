import os
import re
import json
import logging
import aiosqlite
import asyncio
import requests
from datetime import datetime
from logging.handlers import RotatingFileHandler
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    CallbackContext, CallbackQueryHandler, ConversationHandler,
    ContextTypes, PreCheckoutQueryHandler
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
API_STARS_PROVIDER_TOKEN = os.getenv("PAYMENT_TOKEN")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")  # API-–∫–ª—é—á –¥–ª—è DeepSeek

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
if not TOKEN or not API_STARS_PROVIDER_TOKEN or not DEEPSEEK_API_KEY:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
file_handler = RotatingFileHandler('unsub_bot.log', maxBytes=5*1024*1024, backupCount=3)
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)
console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)
logging.getLogger("httpx").setLevel(logging.WARNING)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DB_PATH = 'unsub_data.db'
GROUP_ID = -1002579257687  # ID –≥—Ä—É–ø–ø—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
PRICE_RUB = 399  # –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö
PRICE_STARS = 200  # –¶–µ–Ω–∞ –≤ –∑–≤–µ–∑–¥–∞—Ö

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
FIO, SOURCE, BANK, CARD, EMAIL, PHONE = range(6)

# –ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
FIO_PATTERN = re.compile(r'^[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+$')
CARD_PATTERN = re.compile(r'^\d{6}\*\d{4}$')
EMAIL_PATTERN = re.compile(r'^[^@\s]+@[^@\s]+\.[^@\s]+$')
PHONE_PATTERN = re.compile(r'^\+?\d{10,15}$')

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER,
                fio TEXT, source TEXT, bank TEXT, card TEXT, email TEXT, phone TEXT,
                payment_status TEXT DEFAULT 'pending'
            )''')
        await db.commit()

async def save_data(user_id, data):
    await init_db()
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            '''INSERT INTO users (telegram_id, fio, source, bank, card, email, phone) VALUES (?, ?, ?, ?, ?, ?, ?)''',
            (user_id, data['fio'], data['source'], data['bank'], data['card'], data['email'], data['phone'])
        )
        await db.commit()

async def update_payment_status(user_id, status):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "UPDATE users SET payment_status = ? WHERE telegram_id = ?",
            (status, user_id)
        )
        await db.commit()

# DeepSeek helper
def ask_deepseek(prompt):
    url = "https://api.deepseek.com/v1/chat/completions"
    headers = {"Authorization": f"Bearer {DEEPSEEK_API_KEY}", "Content-Type": "application/json"}
    system_prompt = (
        "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫. –ü—Ä–æ–≤–µ—Ä—è–π –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
    )
    messages = [{"role": "system", "content": system_prompt}, {"role": "user", "content": prompt}]
    data = {"model": "deepseek-chat", "messages": messages, "temperature": 0.7, "max_tokens": 500}
    try:
        resp = requests.post(url, headers=headers, json=data, timeout=20)
        resp.raise_for_status()
        return resp.json()["choices"][0]["message"]["content"]
    except Exception as e:
        logger.error(f"DeepSeek error: {e}")
        return "–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# /start
async def start(update: Update, context: CallbackContext):
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton('‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='start_form')],
        [InlineKeyboardButton('üì® –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º', callback_data='contact_admin')]
    ])
    await update.message.reply_text(
        'üëã <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</b>\n–í—ã –≤ –û—Ç–ø–∏—Å–∫–∞ –ë–æ—Ç –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–ø–∏—Å–∞–Ω–∏–π.',
        reply_markup=kb
    )
    return ConversationHandler.END

# –ö–Ω–æ–ø–∫–∏
async def handle_buttons(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    if query.data == 'start_form':
        await query.message.edit_text('üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û (–¢—Ä–∏ —Å–ª–æ–≤–∞, –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è):')
        return FIO
    if query.data == 'contact_admin':
        await query.message.edit_text('üì® –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞:')
        context.user_data['contact_admin'] = True
        return ConversationHandler.END
    return ConversationHandler.END

# –§–æ—Ä–º—ã
async def process_fio(update: Update, context: CallbackContext):
    text = update.message.text
    if not FIO_PATTERN.match(text):
        corr = ask_deepseek(f"–ü—Ä–æ–≤–µ—Ä—å –§–ò–û: '{text}'")
        await update.message.reply_text(corr)
        return FIO
    context.user_data['fio'] = text
    await update.message.reply_text('üìÉ –£–∫–∞–∂–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–ø–∏—Å–∞–Ω–∏—è:')
    return SOURCE

async def process_source(update: Update, context: CallbackContext):
    text = update.message.text
    if len(text) < 3:
        corr = ask_deepseek(f"–ü—Ä–æ–≤–µ—Ä—å –∏—Å—Ç–æ—á–Ω–∏–∫: '{text}'")
        await update.message.reply_text(corr)
        return SOURCE
    context.user_data['source'] = text
    await update.message.reply_text('üè¶ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:')
    return BANK

async def process_bank(update: Update, context: CallbackContext):
    text = update.message.text
    if not re.match(r'^[\w\s]{3,}$', text):
        corr = ask_deepseek(f"–ü—Ä–æ–≤–µ—Ä—å –±–∞–Ω–∫: '{text}'")
        await update.message.reply_text(corr)
        return BANK
    context.user_data['bank'] = text
    await update.message.reply_text('üí≥ –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ä—Ç—É (123456*7890):')
    return CARD

async def process_card(update: Update, context: CallbackContext):
    text = update.message.text
    if not CARD_PATTERN.match(text):
        corr = ask_deepseek(f"–ü—Ä–æ–≤–µ—Ä—å –∫–∞—Ä—Ç—É: '{text}'")
        await update.message.reply_text(corr)
        return CARD
    context.user_data['card'] = text
    await update.message.reply_text('üìß –í–≤–µ–¥–∏—Ç–µ email:')
    return EMAIL

async def process_email(update: Update, context: CallbackContext):
    text = update.message.text
    if not EMAIL_PATTERN.match(text):
        corr = ask_deepseek(f"–ü—Ä–æ–≤–µ—Ä—å email: '{text}'")
        await update.message.reply_text(corr)
        return EMAIL
    context.user_data['email'] = text
    await update.message.reply_text('üì± –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω:')
    return PHONE

async def process_phone(update: Update, context: CallbackContext):
    text = update.message.text
    if not PHONE_PATTERN.match(text):
        corr = ask_deepseek(f"–ü—Ä–æ–≤–µ—Ä—å —Ç–µ–ª–µ—Ñ–æ–Ω: '{text}'")
        await update.message.reply_text(corr)
        return PHONE
    context.user_data['phone'] = text
    user_id = update.message.from_user.id
    await save_data(user_id, context.user_data)
    info = (
        f"<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:</b>\n"
        f"üë§ {context.user_data['fio']}\n"
        f"üìÑ {context.user_data['source']}\n"
        f"üè¶ {context.user_data['bank']}\n"
        f"üí≥ {context.user_data['card']}\n"
        f"üìß {context.user_data['email']}\n"
        f"üì± {context.user_data['phone']}"
    )
    await context.bot.send_message(GROUP_ID, info)
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {PRICE_RUB}‚ÇΩ", callback_data=f"pay_rub:{PRICE_RUB}" )],
        [InlineKeyboardButton(f"‚≠ê –û–ø–ª–∞—Ç–∏—Ç—å {PRICE_STARS}‚≠ê", callback_data=f"pay_stars:{PRICE_STARS}")]
    ])
    await update.message.reply_text('üí∞ –û–ø–ª–∞—Ç–∏—Ç–µ —É—Å–ª—É–≥—É:', reply_markup=kb)
    return ConversationHandler.END

async def handle_free_text(update: Update, context: CallbackContext):
    if context.user_data.get('contact_admin'):
        await context.bot.send_message(GROUP_ID, f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {update.effective_user.id}: {update.message.text}")
        await update.message.reply_text("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        context.user_data.clear()
        return
    resp = ask_deepseek(update.message.text)
    await update.message.reply_text(resp)

async def handle_payment_button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data.startswith('pay_rub'):
        _, amt = data.split(':')
        prices = [LabeledPrice("–£—Å–ª—É–≥–∞ –æ—Ç–ø–∏—Å–∫–∏", int(amt)*100)]
        await query.bot.send_invoice(
            chat_id=query.from_user.id,
            title="–û–ø–ª–∞—Ç–∞ RUB",
            description="–û—Ç–ø–∏—Å–∫–∞ –ë–æ—Ç",
            payload="pay_rub",
            provider_token=API_STARS_PROVIDER_TOKEN,
            currency="RUB",
            prices=prices
        )
    else:
        _, amt = data.split(':')
        prices = [LabeledPrice("–£—Å–ª—É–≥–∞ –æ—Ç–ø–∏—Å–∫–∏", int(amt))]
        await query.bot.send_invoice(
            chat_id=query.from_user.id,
            title="–û–ø–ª–∞—Ç–∞ STAR",
            description="–û—Ç–ø–∏—Å–∫–∞ –ë–æ—Ç",
            payload="pay_stars",
            provider_token=API_STARS_PROVIDER_TOKEN,
            currency="STAR",
            prices=prices
        )

async def pre_checkout(update: Update, context: CallbackContext):
    await update.pre_checkout_query.answer(ok=True)

async def successful_payment(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    payment = update.message.successful_payment
    await update_payment_status(user_id, "completed")
    await context.bot.send_message(GROUP_ID,
        f"‚úÖ –û–ø–ª–∞—Ç–∞: {update.effective_user.full_name} ID:{user_id} —Å—É–º–º–∞:{payment.total_amount/100}{payment.currency}")
    await update.message.reply_text(
        "‚úÖ –í–∞—à –ø–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å–ª—É–≥–∏."
    )

async def cancel(update: Update, context: CallbackContext):
    await update.message.reply_text('‚ùå –û—Ç–º–µ–Ω–∞.')
    context.user_data.clear()
    return ConversationHandler.END

# Main
def main():
    asyncio.run(init_db())
    app = Application.builder().token(TOKEN).build()
    conv = ConversationHandler(
        entry_points=[CommandHandler('start', start), CallbackQueryHandler(handle_buttons)],
        states={
            FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_fio)],
            SOURCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_source)],
            BANK: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_bank)],
            CARD: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_card)],
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_email)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_phone)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    app.add_handler(conv)
    app.add_handler(CallbackQueryHandler(handle_payment_button, pattern='^pay_'))
    app.add_handler(PreCheckoutQueryHandler(pre_checkout))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_free_text))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == '__main__':
    main()
